---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: verify-signed-rpms
spec:
  params:
    - name: INPUT
      type: string
      description: "AppStudio snapshot or a reference to a container image"
    - name: FAIL_UNSIGNED
      type: string
      description: "[true | false] If true fail if unsigned RPMs were found"
      default: ""
    - name: WORKDIR
      type: string
      default: /tmp
      description: |
        Directory that will be used for storing temporary
        files produced by this task.
  results:
    - name: TEST_OUTPUT
      description: Tekton task test output.
  volumes:
    - name: workdir
      emptyDir: {}
  steps:
    - name: verify-signed-rpms
      image: quay.io/redhat-user-workloads/rhtap-o11y-tenant/tools/tools:b95417fbab81a012881b79fee82f187074248b84
      volumeMounts:
        - name: workdir
          mountPath: "$(params.WORKDIR)"
      env:
        - name: INPUT
          value: "$(params.INPUT)"
        - name: FAIL_UNSIGNED
          value: "$(params.FAIL_UNSIGNED)"
        - name: WORKDIR
          value: "$(params.WORKDIR)"
      script: |
        #!/bin/bash
        set -ex
        set -o pipefail

        rpm_verifier \
          --input "${INPUT}" \
          --fail-unsigned "${FAIL_UNSIGNED}" \
          --workdir "${WORKDIR}" \
          --status-path "${WORKDIR}"/status
    - name: output-results
      image: quay.io/redhat-appstudio/hacbs-test:v1.2.0@sha256:73ff1801ceb0bb4c09f182f73d721e8f4aca31644c35e1f75c91550009ee5cf8
      volumeMounts:
        - name: workdir
          mountPath: "$(params.WORKDIR)"
      env:
        - name: WORKDIR
          value: "$(params.WORKDIR)"
      script: |
        #!/bin/bash
        set -ex

        source /utils.sh
        status=`cat "${WORKDIR}"/status`
        if [ "$status" == "ERROR" ]; then
          note="Task $(context.task.name) completed: Not all RPMs were confirmed to be signed. Refer to Tekton task output for details"
        else
          note="Task $(context.task.name) completed: No unsigned RPMs"
        fi

        TEST_OUTPUT=$(make_result_json -r "$status" -t "$note")
        echo "${TEST_OUTPUT}" | tee $(results.TEST_OUTPUT.path)
